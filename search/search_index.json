{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"building-block-view/","title":"Overview of the Architecture","text":"<p>The architecture is composed of a backend and frontend.</p> <pre><code>flowchart TB\n\nsubgraph frontend[Frontend]\n\n    subgraph singlePageApplication[Single Page Application]\n        direction LR\n        h3[Component: React.JS App]:::type\n        d3[User Interface for the SmashGrade App]:::description\n    end\n    singlePageApplication:::internalComponent\n\n\n    subgraph jsonServer[JSON Server]\n        direction LR\n        h3[Component: JSON Server]:::type\n        d3[Provides REST API endpoints based on db.json]:::description\n    end\n     jsonServer:::internalComponent\n\n\nend\n\nsinglePageApplication--Make API calls--&gt;smashgradeservice\nsinglePageApplication--Make API calls--&gt;jsonServer\n\n\n\nsubgraph backend[Backend]\n    subgraph smashgradeservice[SmashGrade Service]\n        direction LR\n        h10[Component: SmashGrade Service]:::type\n        d10[Backend API written in GO which provides the data]:::description\n    end\n    smashgradeservice:::internalComponent\n\n    subgraph database[Database]\n        direction LR\n        h10[Component: Postgress DB]:::type\n        d20[Database where all data is persisted]:::description\n    end\n    database:::internalComponent\n\n    smashgradeservice--Uses--&gt;database\n\nend\n\n\n%% Element type definitions\n\n\nclassDef person fill:#08427b\nclassDef internalContainer fill:#1168bd\nclassDef internalComponent fill:#4b9bea\nclassDef externalSystem fill:#999999 \n\n\nclassDef type stroke-width:0px, color:#fff, fill:transparent, font-size:12px\nclassDef description stroke-width:0px, color:#fff, fill:transparent, font-size:13px</code></pre>"},{"location":"building-block-view/#frontend","title":"Frontend","text":"<p>The Frontend is a React.JS App.</p>"},{"location":"building-block-view/#backend","title":"Backend","text":"<p>The backend is written in GO</p>"},{"location":"crosscutting-concepts/","title":"Data Fetching","text":"<p>For Data fetching use a REST API provided by the backend.</p>"},{"location":"crosscutting-concepts/#frontend-data-fetching","title":"Frontend Data Fetching","text":"<p>In the frontend we use a library called Tanstack Query which simplifies the common data fetching tasks a lot.</p>"},{"location":"crosscutting-concepts/#example","title":"Example","text":"TypeScriptJavaScript Onboarding.tsx<pre><code>async function getCurriculums(): Promise&lt;Curriculum[]&gt; {\n    const { data } = await axios.get&lt;CurriculumResponse[]&gt;(`${import.meta.env.VITE_BACKEND_API_URL}/curriculums`); \n    return data.map((curriculum) =&gt; ({ value: curriculum.title, label: curriculum.title, year: curriculum.year }));\n}\n\nconst {\n    isLoading: curriculumsLoading,\n    error: curriculumsError,\n    data: curriculumsData,\n} = useQuery({\n    queryKey: ['curriculums'], // (1)\n    queryFn: getCurriculums,\n});\n\nif (yearsLoading || curriculumsLoading) {\n        return &lt;h2&gt;Loading&lt;/h2&gt;;\n    }\n</code></pre> <ol> <li>Key which is used for caching</li> </ol> Onboarding.jsx<pre><code>async function getCurriculums() {\n    const { data } = await axios.get(`${import.meta.env.VITE_BACKEND_API_URL}/curriculums`); \n    return data.map((curriculum) =&gt; ({ value: curriculum.title, label: curriculum.title, year: curriculum.year }));\n}\n\nconst {\n    isLoading: curriculumsLoading,\n    error: curriculumsError,\n    data: curriculumsData,\n} = useQuery({\n    queryKey: ['curriculums'], // (1)\n    queryFn: getCurriculums,\n});\n\nif (yearsLoading || curriculumsLoading) {\n        return &lt;h2&gt;Loading&lt;/h2&gt;;\n    }\n</code></pre> <ol> <li>Key which is used for caching</li> </ol>"},{"location":"deployment-view/","title":"Frontend","text":"<p>The Frontend React App is automatically deployed using GitHub Action Workflows.</p>"},{"location":"deployment-view/#workflow-flow-chart","title":"Workflow Flow Chart","text":"<pre><code>flowchart TD\n  Push[Push to Pull Request] --&gt; CheckPullRequestStatus{Pull Requst Status == };\n  CheckPullRequestStatus --&gt;|opened| CreateComment;\n  CheckPullRequestStatus --&gt;|synchronized| UpdateCommentRunning;\n  CheckPullRequestStatus --&gt;|closed| DeleteAzureSLot;\n\n  UpdateCommentRunning[Update PR Comment: 'Deployment Running'] --&gt; RunBuild\n  CreateComment[Create PR Comment: 'Creating Deployment'] --&gt; CreateAzureSlot\n  RunBuild[Run react build] --&gt; DownloadBuildArtifact\n  CreateAzureSlot[Create Azure Deployment Slot] --&gt; RunBuild;\n  DeleteAzureSLot[Delete Azure Deployment Slot] --&gt; UpdateCommentDeleted;\n  DownloadBuildArtifact[Download build artifact form build job] --&gt; DeployToAzureAppService\n  DeployToAzureAppService[Deploy build artifact to Azure App Service] --&gt; UpdateCommentDone\n  UpdateCommentDone[Update PR Comment: 'Deployment Finished'] --&gt; Finish;\n  UpdateCommentDeleted[Update PR Comment: 'Deployment Deleted'] --&gt; Finish;\n  Finish[Finish]\n</code></pre>"},{"location":"deployment-view/#example-workflow-run-in-github","title":"Example workflow run in GitHub","text":"<p>Opened Workflow:  Closed Workflow: </p>"},{"location":"introduction-goals/","title":"Introduction","text":"<p>In this documentation we follow the arc42 template to document the architecture and technologies of our application \"SmashGrade\"</p>"},{"location":"introduction-goals/#what-is-smashgrade","title":"What is SmashGrade","text":"<p>Smash Grade is a Web Application which allows students and teachers and course admins to manage their grades and courses.</p>"},{"location":"introduction-goals/#goals","title":"Goals","text":"<p>Course Administrator</p> <p>Purpose: To enable the course administrator to efficiently manage curricula, course groups, associated courses, exams, user roles and course assignments.</p> <p>Advantage: The course administrator can perform his or her tasks more efficiently, resulting in a smooth organisation of the curricula. organisation of curricula. Furthermore, improved management and overview of courses and exams.</p> <p>Measurement:</p> <ul> <li>Success is measured by the number of curricula (including sub-objects) created and updated by the course administrator. curricula (including sub-objects) by the course administrator.</li> <li>The time saved in the administration of study plans is recorded.</li> <li>The accuracy and completeness of the stored curriculum data is assessed by the heads of the study programmes (full-time and part-time) and the heads of the departments of the hftm.</li> </ul>"},{"location":"Frontend/azure-env/","title":"Setup Prerequisites","text":"<ul> <li>Microsoft Entra Tenant</li> <li>Microsoft Entra Subscription</li> </ul>"},{"location":"Frontend/azure-env/#install-azure-powershell-module","title":"Install Azure PowerShell Module","text":"<pre><code>Install-Module -Name Az -Repository PSGallery -Force\n</code></pre>"},{"location":"Frontend/azure-env/#create-resource-group","title":"Create Resource Group","text":"<pre><code>Connect-AzAccount\n</code></pre> <pre><code>New-AzResourceGroup -Name rg-SmashGrade -Location switzerlandNorth\n</code></pre>"},{"location":"Frontend/azure-env/#create-a-static-web-app-later-we-will-be-able-to-deploy-a-template","title":"Create a Static Web App (Later we will be able to deploy a template)","text":"<p>Navigate to: Resource groups &gt; rg-SmashGrade &gt; + Create </p> <ol> <li>Select your Subscription</li> <li>Your created Resource Group</li> <li>define a name (starting with stapp-* according to the best practices https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations)</li> <li>select Azure Staging Region</li> <li>Sign in to GitHub an request access token for SmashGrade GitHub Repo</li> <li>Select the Organization, Repo and Branch</li> <li>Build Presents -&gt; React</li> <li>App location <code>/</code></li> <li>Api location: (default)</li> <li>Output location: 'dist'</li> </ol> <p></p>"},{"location":"Frontend/azure-env/#short-overview","title":"Short Overview","text":""},{"location":"Frontend/azure-env/#overview-page","title":"Overview Page","text":"<p>On the Overview section you have all the important stuff like the URL for the web page itself or the GitHub Action URL. </p>"},{"location":"Frontend/azure-env/#define-a-password","title":"Define a password","text":"<p>This will result in a password prompt each time you open the page </p>"},{"location":"Frontend/azure-env/#artifacts-created-by-azure-in-github","title":"Artifacts created by Azure in GitHub","text":"<p>GitHub Action </p> <p>Secrets for GitHub Actions </p> <p>Workflow File: </p>"},{"location":"Frontend/azure-env/#create-web-app","title":"Create Web App","text":"<p>Create a new Web App: </p> <p>Set Deployment settings: </p> <p>Review + create</p> <p>Create the Git Actions as defined in the following Branch: https://github.com/SmashGrade/SmashGrade-App/tree/%2332-deploy-pr-to-azure-slot</p>"}]}